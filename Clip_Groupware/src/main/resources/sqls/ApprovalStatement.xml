<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.clip.gwr.model.mapper.ApprovalDaoImpl">


	<!-- 내가 요청한 결재내역 전체 조회 (세션에서 나의 사원번호 사용)-->
	<select id="getAllApproval" resultType="ApprovalVo" parameterType="java.lang.String">
     	SELECT 
		    p.APP_SEQ, 
		    p.APP_TITLE, 
		    p.APP_CONTENT, 
		    g.GIAN_NAME AS GIAN_SEQ,  
		    (ROW_NUMBER() OVER(PARTITION BY p.APP_SEQ ORDER BY pl.PAY_NUM) + 1) || '차 승인' AS PAY_NUM,
		    TO_CHAR(p.APP_CREATEDATE, 'YYYY"년"MM"월"DD"일"') AS APP_CREATEDATE, 
		    p.APP_DRAFT ,p.USER_ID
		FROM APPROVAL p 
		JOIN GIAN g ON g.GIAN_SEQ = p.GIAN_SEQ 
		JOIN PAYMENTLINE pl ON p.APP_SEQ = pl.APP_SEQ
		WHERE p.USER_ID = #{user_id}  AND p.APP_DRAFT != '임시저장'
		ORDER BY  p.APP_CREATEDATE DESC
	</select>
	

		<!-- 내가/내팀이 참조된 결재내역 전체 조회 (세션에서 나의 사원번호 사용)-->		
		<select id="selectReferApproval" resultType="ApprovalVo" parameterType="java.lang.String">
			SELECT a.APP_SEQ ,a.APP_TITLE , g.GIAN_NAME  AS GIAN_SEQ  ,TO_CHAR(a.APP_CREATEDATE, 'YYYY"년"MM"월"DD"일"') AS APP_CREATEDATE ,a.APP_DRAFT ,r.REF_USER  ,r.REF_TEAM  
			FROM APPROVAL a 
			JOIN GIAN g ON a.GIAN_SEQ = g.GIAN_SEQ 
			JOIN REFERENCE r ON a.APP_SEQ = r.APP_SEQ
			WHERE r.REF_USER = #{user_id}
			ORDER BY a.APP_CREATEDATE DESC
		</select>
	

	<!-- 나의 결재승인을 받아야하는 결재 리스트조회 (세션에서 사원번호 사용) -->
	<select id="getMyPaycheck" resultType="ApprovalVo" parameterType="java.lang.String">
		SELECT A.APP_SEQ, A.APP_TITLE, A.APP_CONTENT,
		       g.GIAN_NAME AS GIAN_SEQ, TO_CHAR(A.APP_CREATEDATE, 'YYYY/MM/DD') AS APP_CREATEDATE, A.APP_DRAFT
		FROM APPROVAL A
		JOIN (
		    SELECT 
		        APP_SEQ,
		        JSON_VALUE(APP_PAYLINE, '$.paymentLine.first') AS PAYLINE_1ST,
		        JSON_VALUE(APP_PAYLINE, '$.paymentLine.second') AS PAYLINE_2ND,
		        JSON_VALUE(APP_PAYLINE, '$.paymentLine.third') AS PAYLINE_3RD,
		        JSON_VALUE(APP_PAYLINE, '$.paymentOk.first') AS PAYOK_1ST,
		        JSON_VALUE(APP_PAYLINE, '$.paymentOk.second') AS PAYOK_2ND,
		        JSON_VALUE(APP_PAYLINE, '$.paymentOk.third') AS PAYOK_3RD
		    FROM 
		        APPROVAL
		) JT ON A.APP_SEQ = JT.APP_SEQ
		JOIN GIAN g ON A.GIAN_SEQ = g.GIAN_SEQ
		WHERE 
		    (JT.PAYLINE_1ST = #{user_id} AND A.APP_DRAFT NOT IN ('임시저장', '결재취소'))
		    OR (JT.PAYLINE_2ND = #{user_id} AND JT.PAYOK_1ST != 'N' AND A.APP_DRAFT NOT IN ('임시저장', '결재취소'))
		    OR (JT.PAYLINE_3RD = #{user_id} AND JT.PAYOK_1ST != 'N' AND JT.PAYOK_2ND != 'N' AND A.APP_DRAFT NOT IN ('임시저장', '결재취소'))
		ORDER BY 
		    A.APP_CREATEDATE DESC
	</select>
	
	
	<!-- 나의 결재승인을 받아야하는 결재 아직 미처리한 리스트조회 (세션에서 사원번호 사용) -->
	<select id="getMyUnprocessedPaycheck" resultType="ApprovalVo" parameterType="java.lang.String">
		SELECT A.APP_SEQ, A.APP_TITLE, A.APP_CONTENT,
		       g.GIAN_NAME AS GIAN_SEQ, TO_CHAR(A.APP_CREATEDATE, 'YYYY/MM/DD') AS APP_CREATEDATE, A.APP_DRAFT
		FROM APPROVAL A
		JOIN (
		    SELECT 
		        APP_SEQ,
		        JSON_VALUE(APP_PAYLINE, '$.paymentLine.first') AS PAYLINE_1ST,
		        JSON_VALUE(APP_PAYLINE, '$.paymentLine.second') AS PAYLINE_2ND,
		        JSON_VALUE(APP_PAYLINE, '$.paymentLine.third') AS PAYLINE_3RD,
		        JSON_VALUE(APP_PAYLINE, '$.paymentOk.first') AS PAYOK_1ST,
		        JSON_VALUE(APP_PAYLINE, '$.paymentOk.second') AS PAYOK_2ND,
		        JSON_VALUE(APP_PAYLINE, '$.paymentOk.third') AS PAYOK_3RD
		    FROM 
		        APPROVAL
		) JT ON A.APP_SEQ = JT.APP_SEQ
		JOIN GIAN g ON A.GIAN_SEQ = g.GIAN_SEQ 	
		WHERE 
		    (JT.PAYLINE_1ST = #{user_id} AND JT.PAYOK_1ST = 'N' AND A.APP_DRAFT NOT IN ('임시저장', '결재취소', '결재반려'))
		    OR (JT.PAYLINE_2ND = #{user_id} AND JT.PAYOK_1ST != 'N' AND JT.PAYOK_2ND = 'N' AND A.APP_DRAFT NOT IN ('임시저장', '결재취소', '결재반려'))
		    OR (JT.PAYLINE_3RD = #{user_id} AND JT.PAYOK_1ST != 'N' AND JT.PAYOK_2ND != 'N' AND JT.PAYOK_3RD = 'N' AND A.APP_DRAFT NOT IN ('임시저장', '결재취소', '결재반려'))
		ORDER BY 
		    A.APP_CREATEDATE DESC
	</select>
	
	<!-- 나의 결재승인을 받아야하는 결재 내가 반려한 결재 리스트 조회 -->
   <select id="getMyRejectPay" resultType="ApprovalVo" parameterType="java.lang.String">
      SELECT A.APP_SEQ, A.APP_TITLE, A.APP_CONTENT,
          g.GIAN_NAME AS GIAN_SEQ, TO_CHAR(A.APP_CREATEDATE, 'YYYY/MM/DD') AS APP_CREATEDATE, A.APP_DRAFT
      FROM 
          APPROVAL A
      JOIN 
          (SELECT 
              APP_SEQ,
              JSON_VALUE(APP_PAYLINE, '$.paymentLine.first') AS PAYLINE_1ST,
              JSON_VALUE(APP_PAYLINE, '$.paymentLine.second') AS PAYLINE_2ND,
              JSON_VALUE(APP_PAYLINE, '$.paymentLine.third') AS PAYLINE_3RD,
              JSON_VALUE(APP_PAYLINE, '$.paymentOk.first') AS PAYOK_1ST,
              JSON_VALUE(APP_PAYLINE, '$.paymentOk.second') AS PAYOK_2ND,
              JSON_VALUE(APP_PAYLINE, '$.paymentOk.third') AS PAYOK_3RD
          FROM 
              APPROVAL) JT
      ON 
          A.APP_SEQ = JT.APP_SEQ
      JOIN GIAN g ON A.GIAN_SEQ = g.GIAN_SEQ 	    
      WHERE 
          (JT.PAYLINE_1ST = #{user_id} AND JT.PAYOK_1ST = 'N' AND A.APP_DRAFT ='결재반려')
          OR (JT.PAYLINE_2ND = #{user_id} AND (JT.PAYOK_1ST != 'N' AND JT.PAYOK_2ND = 'N') AND A.APP_DRAFT = '결재반려')
          OR (JT.PAYLINE_3RD = #{user_id} AND (JT.PAYOK_1ST != 'N' AND JT.PAYOK_2ND != 'N' AND JT.PAYOK_3RD = 'N') AND A.APP_DRAFT ='결재반려')
      ORDER BY 
          A.APP_CREATEDATE DESC
   </select>
	
	
	
	
	<!-- 결재 승인/반려에따라 결재라인 및 결재현황 변경로직 -->
	<!-- 결재라인 승인/반려시에 맞춰 결재라인승인 정보와 결재 현황을 업데이트 -->
	<update id="checkApprovalLine" parameterType="ApprovalVo">
		UPDATE APPROVAL SET APP_PAYLINE = #{app_payline},
					APP_DRAFT  = #{app_draft}
		WHERE APP_SEQ = #{app_seq}
	</update>
	


	<!-- 결재내역 단일 상세 조회 (클릭한 결재의 결재시퀀스 사용) -->
	<select id="getOneApproval" resultType="ApprovalVo" parameterType="java.lang.String">
		SELECT *
	        FROM APPROVAL a 
	        WHERE APP_SEQ = #{app_seq} 
	</select>	



	<!-- 결재 조건별검색 전체리스트 조회 (옵션태그에서 선택한 태그의 밸류 사용) -->

	<select id="conditionSearchApproval" resultType="ApprovalVo" parameterType="java.util.Map">
    SELECT APP_SEQ, APP_TITLE, APP_CONTENT,
           GIAN_SEQ, TO_CHAR(APP_CREATEDATE, 'YYYY/MM/DD') AS APP_CREATEDATE, APP_DRAFT
	    FROM APPROVAL
	   	 WHERE 1=1
	    <if test="title!=null">
	        AND APP_TITLE LIKE '%' || #{title} || '%'
	    </if>
	    <if test="name != null">
	    	AND APP_SEQ  IN (SELECT JS.APP_SEQ
			FROM USERINFO RIGHT JOIN (SELECT APP_SEQ ,JSON_VALUE(APP_PAYLINE, '$.writer') JT
										FROM APPROVAL) JS
			ON (JS.JT = USER_ID)
			WHERE USER_NAME LIKE '%' || #{name} || '%')
	    </if>
	    AND NOT(APP_DRAFT = '임시저장' OR APP_DRAFT = '결재취소')
	    ORDER BY APP_CREATEDATE DESC
	</select>



	<!-- 임시저장한 결재리스트 조회 (세션에서 나의 사원번호 사용) -->
	<select id="getTempApproval" parameterType="java.lang.String" resultType="ApprovalVo">
		SELECT p.APP_SEQ ,p.APP_TITLE ,p.APP_CONTENT ,g.GIAN_NAME  AS GIAN_SEQ ,  TO_CHAR(p.APP_CREATEDATE, 'YYYY"년"MM"월"DD"일"') AS APP_CREATEDATE
		FROM APPROVAL p
		JOIN GIAN g ON p.GIAN_SEQ = g.GIAN_SEQ
		WHERE p.USER_ID = #{user_id} AND p.APP_DRAFT = '임시저장'
		ORDER BY p.APP_CREATEDATE DESC
	</select>
	
	<!-- 임시저장된 결재 삭제 -->
	<delete id="tempDelete">
		DELETE  FROM APPROVAL WHERE APP_SEQ = #{app_seq}
	</delete>



	<!-- 날짜 지정에따른 결재 신청 (결재작성창 정보들 이용)-->
	<insert id="reqDynamicDateApproval" parameterType="ApprovalVo">
    INSERT INTO APPROVAL
        (APP_SEQ, APP_TITLE, APP_CONTENT,
        GIAN_SEQ, APP_PAYLINE, APP_STRDATE,
        APP_ENDDATE)
    VALUES('APPROVAL_' || TO_CHAR(APPROVAL_SEQ.NEXTVAL), #{app_title}, #{app_content},
        #{gian_seq}, #{app_payline},
        <choose>
            <!-- 만약 시작 날짜와 끝 날짜가 모두 존재하는 경우 -->
            <when test="app_strdate != null and app_enddate != null">
                TO_DATE( #{app_strdate}, 'YYYY-MM-DD HH24:MI:SS'),
                TO_DATE( #{app_enddate}, 'YYYY-MM-DD HH24:MI:SS')
            </when>
            <!-- 만약 시작 날짜와 끝 날짜가 모두 존재하지 않는 경우 -->
            <otherwise>
                LOCALTIMESTAMP,  
                LOCALTIMESTAMP
            </otherwise>
        </choose>
    )
	</insert>


	<!-- 결재파일 임시저장 (결재작성창 정보들 이용)-->
	<insert id="saveTempApproval" parameterType="ApprovalVo">
	INSERT INTO APPROVAL
		(APP_SEQ, APP_TITLE, APP_CONTENT,
		GIAN_SEQ, APP_DRAFT, APP_PAYLINE)
	VALUES('APPROVAL_' || TO_CHAR(APPROVAL_SEQ.NEXTVAL), #{app_title}, #{app_content},
			#{gian_seq}, '임시저장' , #{app_payline} )
	</insert>
	
	<update id="cancelApproval" parameterType="ApprovalVo">
	UPDATE APPROVAL SET APP_DRAFT ='결재취소'
                WHERE APP_SEQ = #{app_seq}	
	</update>
	
	
	
	
	
	
</mapper>